import './Common'

fastlane_require 'dotenv'

dir = File.expand_path('..', Dir.pwd).freeze

# used for debugging options with Jenkins
print_options = false.freeze

## Android ##
AND_APP_SPECIFIER = 'com.devopstesting'
APP_BUILD_GRADLE_PATH = 'android/app/build.gradle'.freeze

AND_DEV_BUNDLE_ID_SUFFIX = 'dev'.freeze
AND_DEV_BUILT_PPRODUCTS_PATH = "#{dir}/android/app/build/outputs/apk/debug/app-debug.apk".freeze

AND_STAGING_BUNDLE_ID_SUFFIX = 'staging'.freeze
AND_STAGING_BUILT_PPRODUCTS_PATH = "#{dir}/android/app/build/outputs/apk/staging/app-staging-unsigned.apk".freeze

AND_RELEASE_BUILT_PPRODUCTS_PATH = "#{dir}/android/app/build/outputs/apk/release/app-release.apk".freeze

before_all do |lane, options|
    parsed_options = {
        :skip_before => handle_env_and_options(
          ENV['SKIP_BEFORE'],
          options[:skip_before],
          false,
          false
        )
    }
    unless parsed_options[:skip_before]
        
    end
end

platform :android do
  desc 'Android development build'
  lane :dev do |options|
    debug_options(options, print_options)
    copy_env_for_build_type('dev')

    parsed_options = {
      :badge => handle_env_and_options(
        ENV['BADGE'],
        options[:badge],
        false,
        false
      ),
      :clean => handle_env_and_options(
        ENV['CLEAN'],
        options[:clean],
        false,
        true
      ),
      :install => handle_env_and_options(
        ENV['INSTALL'],
        options[:install],
        false,
        false
      )
    }

    if parsed_options[:badge]
      add_badge(
        shield: "#{ANDROID_VERSION_NAME}-#{ANDROID_VERSION_CODE}-orange",
        glob: 'android/app/src/main/res/mipmap-*/ic_launcher.png',
        alpha: true,
        shield_scale: "0.75"
      )
    end

    if parsed_options[:clean]
      gradle(
        task: 'clean',
        project_dir: 'android/'
      )
    end

    gradle(
      task: 'assemble',
      build_type: 'debug',
      project_dir: 'android/'
    )

    if parsed_options[:install]
      adb(
        command: "uninstall #{AND_APP_SPECIFIER}.#{AND_DEV_BUNDLE_ID_SUFFIX}"
      )
      adb(
        command: "install #{AND_DEV_BUILT_PPRODUCTS_PATH}"
      )
      adb(
        command: "shell monkey -p #{AND_APP_SPECIFIER}.#{AND_DEV_BUNDLE_ID_SUFFIX}
                  -c android.intent.category.LAUNCHER 1"
      )
    end
  end

  desc 'Android staging build'
  lane :staging do |options|
    debug_options(options, print_options)
    copy_env_for_build_type('staging')

    parsed_options = {
      :badge => handle_env_and_options(
        ENV['BADGE'],
        options[:badge],
        false,
        false
      ),
      :clean => handle_env_and_options(
        ENV['CLEAN'],
        options[:clean],
        false,
        true
      ),
      :install => handle_env_and_options(
        ENV['INSTALL'],
        options[:install],
        false,
        false
      )
    }

    if parsed_options[:badge]
      add_badge(
        shield: "#{ANDROID_VERSION_NAME}-#{ANDROID_VERSION_CODE}-orange",
        glob: 'android/app/src/main/res/mipmap-*/ic_launcher.png',
        alpha: true,
        shield_scale: "0.75"
      )
    end

    if parsed_options[:clean]
      gradle(
        task: 'clean',
        project_dir: 'android/'
      )
    end

    gradle(
      task: 'assemble',
      build_type: 'staging',
      project_dir: 'android/'
    )

    if parsed_options[:install]
      adb(
        command: "uninstall #{AND_APP_SPECIFIER}.#{AND_STAGING_BUNDLE_ID_SUFFIX}"
      )
      adb(
        command: "install #{AND_STAGING_BUILT_PPRODUCTS_PATH}"
      )
      adb(
        command: "shell monkey -p #{AND_APP_SPECIFIER}.#{AND_STAGING_BUNDLE_ID_SUFFIX}
                  -c android.intent.category.LAUNCHER 1"
      )
    end
  end

  desc 'Android release build, upload to Play Store'
  lane :release do |options|
    debug_options(options, print_options)
    copy_env_for_build_type('release')

    parsed_options = {
      :play_store => handle_env_and_options(
        ENV['PLAY_STORE'],
        options[:play_store],
        false,
        false
      )
    }

    gradle(task: 'clean', project_dir: "android/")

    gradle(task: "assemble", build_type: "release", project_dir: "android/")

    if parsed_options[:play_store]
      supply(track: "alpha", apk: AND_RELEASE_BUILT_PPRODUCTS_PATH)
    end

  end
end